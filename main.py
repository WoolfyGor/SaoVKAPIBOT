import vk_api
import json
from pprint import pprint
import re
from copy import deepcopy
from vk_api.longpoll import  VkLongPoll,VkEventType
from vk_api.keyboard import VkKeyboard
vk_session = vk_api.VkApi(token="50e232192af3719b7e80b341b479c2665be8a8d012de1882101dceb003fa86eb28cfb80c10b090a2644db")
session_api = vk_session.get_api()
longpool = VkLongPoll(vk_session)
vk_user_session = vk_api.VkApi(token="db176e08c29211bc00d3d72ee21b96cca5ae7ee2ea268312a8dcf3a959e0883f0416bf9ad7ca2969df270")

class User:
    def __init__(self):
        self.id=''
        self.name=''
        self.side=''
        self.lvl=1
        self.accLvl=0
        self.State='null'

Users=[]
def fillUsersArray():
    objects = vk_user_session.method('board.getComments', {'group_id': 118649434, 'topic_id': 47958603})
    objNorma=str(objects)
    objArr=objNorma[objNorma.find("{[")+2:].split("}, {")
    for i in range(len(objArr)):
        if(i==0):
            i+=1
            continue
        else:
            cuttedName=objArr[i][objArr[i].find("–∞–∂–∞ :")+5:]
            cuttedPastNameRaw=re.search("2",cuttedName)

            cutteCharName=cuttedName[:cuttedPastNameRaw.start()-4]

            cuttedSide=objArr[i][objArr[i].find("—Ç–æ—Ä–æ–Ω–∞ :")+8:]

            cuttedCharSide=cuttedSide[:cuttedSide.find('\'')]

            cuttedId = objArr[i][objArr[i].find("2) –ö–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:") + 17:]
            cuttedIdRaw=re.search("3\)",cuttedId)

            cuttedCharId=cuttedId[:cuttedIdRaw.start()-3]

            cuttedLvl= objArr[i][objArr[i].find("–ò–≥—Ä–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:") + 16:]
            cuttedLvlRaw=re.search("\|",cuttedLvl)

            cuttedCharLvl=cuttedLvl[1:cuttedLvlRaw.start()-1]

            cuttedAccLvl = objArr[i][objArr[i].find("–£—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞ :") + 18:]
            cuttedAccLvlRaw = re.search("6\)", cuttedAccLvl)

            cuttedCharAccLvl = cuttedAccLvl[1:cuttedAccLvlRaw.start() - 4]

            newUser = User()
            newUser.id=cuttedCharId
            newUser.name=cutteCharName
            newUser.side=cuttedCharSide
            newUser.lvl=cuttedCharLvl
            newUser.accLvl=cuttedCharAccLvl
            Users.append(newUser)


fillUsersArray()

def check_character(id):
    objects = vk_user_session.method('board.getComments',  {'group_id': 118649434, 'topic_id': 47958603})
    if str(id) in str(objects) : return True
    else: return False

def getCurUserState(id):
    for user in Users:
        if user.id == id:
            return user.State

def setCurUserState(id,state):
    for user in Users:
        if user.id == id:
            user.State = state
            return


def make_new_playerboard_msg(id,name,side):
    if  check_character(id):
        sender(id,"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂!")
    else:
        message = "1) –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ :"+ name+ " \n 2) –ö–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " + str(id)+ "\n 3) –í–∞–ª—é—Ç—ã: –û–ó–£ - 0, –∫–æ–ª–ª - 0 \n 4) –ò–≥—Ä–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: 1 | –£—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞ : 0 \n 6)–†–∞—Å–∞: \n 7) –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:"+"\n 8) –°—Ç–æ—Ä–æ–Ω–∞ :"+side
        vk_user_session.method('board.createComment',{'group_id':118649434,'topic_id':47958603,'message':message,'from_group':1})


def get_but(text, color):
    return {
        "action": {
            "type": "text",
            "payload": "{\"button\": \"" + "1" + "\"}",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


def sender (id,text,keyboard = ""):
    if keyboard == "" :
        vk_session.method('messages.send', {'user_id': id, 'message': text, 'random_id': 0})
    else:
        vk_session.method('messages.send', {'user_id': id, 'message': text, 'random_id': 0, 'keyboard': keyboard})
def getUserCharacter(id):
    for user in Users:
        checkUser = User()
        checkUser.id=id
        newStr =str(id)[0:]
        if str(str(user.id)[1:]) == str(newStr):
            return user
        else:continue
    return False

def getUserCharacterString(user):
    string = "1) –ò–º—è: "+user.name +" \n 2)–ò–≥—Ä–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: "+str(user.lvl) + " | –£—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞: "+str(user.accLvl)+" \n 3)–°—Ç–æ—Ä–æ–Ω–∞: "+user.side
    return string
def displayMenu():
    keyboard = {
        "one_time": True,
        "buttons": [
            [get_but('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –û–ó–£üí¨', 'positive')],
            [get_but('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üòé', 'positive')],
            [get_but('–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üßÆ', 'positive')]
        ]
    }
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    sender(id, "–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?", keyboard)
def send_some_mesage(id,text):
  if text == "–ú–µ–Ω—é":
     displayMenu()
  elif (text == "–ù–∞—á–∞—Ç—å"):
      if check_character(id):
          sender(id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç!")
          displayMenu()
      else:
          keyboard = {
              "one_time": True,
              "buttons": [
                  [get_but('–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'positive')],
                  [get_but('–ü–æ–º–æ—â—å', 'positive')]
              ]
          }
          keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
          keyboard = str(keyboard.decode('utf-8'))
          sender(id,
                 "–ü–æ –≤—Å–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç—ã –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π. –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –Ω–∞—á–∞—Ç—å –ø–æ–∫–æ—Ä–µ–Ω–∏–µ –ê–π–Ω–∫—Ä–∞–¥–∞?",
                 keyboard)
          newUser = User();
          newUser.id = id;
          Users.append(newUser)
          pprint(Users)
          print("---------------------------------------")

  elif text.startswith("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"):
      print("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É")
      if getUserCharacter(id) != False:
          print("–ù–µ –ø—É—Å—Ç–æ–π")
          sender(id,"–í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂: \n"+ getUserCharacterString(getUserCharacter(id)))
          send_some_mesage(id,"–ú–µ–Ω—é")
      else:
          print("–ü—É—Å—Ç–æ–π")
  elif (text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –û–ó–£üí¨"):

            sender( id, "–û—Ñ–æ—Ä–º–∏ –∑–∞—è–≤–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞: \n|–ù–ê–ß–ò–°–õ–ï–ù–ò–ï –û–ó–£|\n 1)–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n 2)–ö–æ–ª-–≤–æ –û–ó–£\n 3)–°—Å—ã–ª–∫–∏-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –û–ó–£")
  elif "|–ù–ê–ß–ò–°–õ–ï–ù–ò–ï –û–ó–£|" in text:
            sender(id,"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–≤–æ—é –∑–∞—è–≤–∫—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É. –ï—ë —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–±–Ω–æ–≤—è—Ç –¥–∞–Ω–Ω—ã–µ!")
            sender(515721924, "1 –¢–µ–±–µ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –û–ó–£! \n"+text +"\n –ø—Ä–∏—à–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: "+ str(id))
  else:
            sender( id,"–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã: "+text+". –ù–∞–ø–∏—à–∏ \"–ú–µ–Ω—é\" —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É")



def registration(id,msg='',localstate =''):
    print(msg)
    print(localstate)
    if(check_character(id)):
        sender(id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç!")
        displayMenu()
        return
    if(localstate == "Registration begin"):
          keyboard = {
            "one_time": True,
            "buttons": [
                [get_but('–Ø –∏–∑ SAO', 'positive')],
                [get_but('–Ø –∏–∑ UW', 'positive')]
            ]
                    }
          keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
          keyboard = str(keyboard.decode('utf-8'))
          sender(id,"–ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?",keyboard)



    if(localstate == "Recieved world"):
           sender(id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ò–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ... –ö–∞–∫ –±—É–¥—É—Ç –∑–≤–∞—Ç—å —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?")
           for user in Users:
                print("Do cycle step")
                if user.id == id:
                    if (user.side == "SAO" or user.side == "UW"):
                        return True
                    else:
                        user.side = msg[5:]
                        return True
                else:
                    continue
           return False
    if(localstate == "Recieved name"):
        keyboard = {
            "one_time": True,
            "buttons": [
                [get_but('–î–∞', 'positive')],
                [get_but('–ù–µ—Ç, —è —Ö–æ—á—É –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å', 'negative')]
            ]
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))
        sender(id, msg +"... –í—ã–±–æ—Ä —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏ —è–≤–ª—è–µ—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º?",keyboard)

    if(localstate == "Complete Registration"):
        for user in Users:
            if user.id == id:
                user.name = msg
                make_new_playerboard_msg(user.id,user.name,user.side)


State = "null"
namemsg=''
for event  in longpool.listen():

    if event.type == VkEventType.MESSAGE_NEW:
        if event.to_me:
            msg = event.text
            id = event.user_id;
            if(msg == "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"):
                setCurUserState(id,"Registration begin")
                registration(id,msg,getCurUserState(id))
            elif(msg=="–Ø –∏–∑ SAO" or msg == "–Ø –∏–∑ UW"):
                setCurUserState(id,'Recieved world')
                if registration(id,msg,getCurUserState(id)):
                    setCurUserState(id,  "Sended name pending")
                else:
                    setCurUserState(id,"Recieved world")
            elif(getCurUserState(id) == "Sended name pending"):
                setCurUserState(id, "Recieved name")
                registration(id,msg,getCurUserState(id))
                namemsg=msg;
            elif(getCurUserState(id) == "Recieved name" and str(msg).startswith("–ù–µ—Ç")):
                setCurUserState(id,'Recieved world')
                if registration(id, msg, getCurUserState(id)):
                    setCurUserState(id, "Sended name pending")
                else:
                    setCurUserState(id, "Recieved world")
            elif(getCurUserState(id) == "Recieved name" and str(msg).startswith("–î–∞")):
                    sender(id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–æ–∑–¥–∞—é —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
                    setCurUserState(id, "Complete Registration")
                    registration(id,namemsg,getCurUserState(id))
                    setCurUserState(id, "null")
                    sender(id, "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∑–¥–µ—Å—å: https://vk.com/topic-118649434_47958603")
                    send_some_mesage(id,"–ú–µ–Ω—é")

            elif State =="null":
                send_some_mesage(id,msg)
